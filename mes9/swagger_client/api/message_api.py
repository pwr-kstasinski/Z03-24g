# coding: utf-8

"""
    demo_app

    SAFRSAPI  # noqa: E501

    OpenAPI spec version: 0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MessageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_message0(self, content_type, post_body, **kwargs):  # noqa: E501
        """Create Message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_message0(content_type, post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param MessageInst1 post_body: Message attributes (required)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_message0_with_http_info(content_type, post_body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_message0_with_http_info(content_type, post_body, **kwargs)  # noqa: E501
            return data

    def create_message0_with_http_info(self, content_type, post_body, **kwargs):  # noqa: E501
        """Create Message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_message0_with_http_info(content_type, post_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param MessageInst1 post_body: Message attributes (required)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'post_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_message0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `create_message0`")  # noqa: E501
        # verify the required parameter 'post_body' is set
        if self.api_client.client_side_validation and ('post_body' not in params or
                                                       params['post_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post_body` when calling `create_message0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'post_body' in params:
            body_params = params['post_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Message/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageInst1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_messagefrom_message0(self, message_id, content_type, **kwargs):  # noqa: E501
        """Delete Message from Message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_messagefrom_message0(message_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_id: (required)
        :param str content_type: (required)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_messagefrom_message0_with_http_info(message_id, content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_messagefrom_message0_with_http_info(message_id, content_type, **kwargs)  # noqa: E501
            return data

    def delete_messagefrom_message0_with_http_info(self, message_id, content_type, **kwargs):  # noqa: E501
        """Delete Message from Message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_messagefrom_message0_with_http_info(message_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_id: (required)
        :param str content_type: (required)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message_id', 'content_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_messagefrom_message0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message_id' is set
        if self.api_client.client_side_validation and ('message_id' not in params or
                                                       params['message_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `message_id` when calling `delete_messagefrom_message0`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `delete_messagefrom_message0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'message_id' in params:
            path_params['MessageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Message/{MessageId}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageInst1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_messageinstance0(self, message_id, content_type, **kwargs):  # noqa: E501
        """Retrieve Message instance  # noqa: E501

        Retrieve Message from Message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_messageinstance0(message_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_id: (required)
        :param str content_type: (required)
        :param str include: Message relationships to include (csv)
        :param str fields_message: Message fields to include (csv)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_messageinstance0_with_http_info(message_id, content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_messageinstance0_with_http_info(message_id, content_type, **kwargs)  # noqa: E501
            return data

    def retrieve_messageinstance0_with_http_info(self, message_id, content_type, **kwargs):  # noqa: E501
        """Retrieve Message instance  # noqa: E501

        Retrieve Message from Message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_messageinstance0_with_http_info(message_id, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_id: (required)
        :param str content_type: (required)
        :param str include: Message relationships to include (csv)
        :param str fields_message: Message fields to include (csv)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message_id', 'content_type', 'include', 'fields_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_messageinstance0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message_id' is set
        if self.api_client.client_side_validation and ('message_id' not in params or
                                                       params['message_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `message_id` when calling `retrieve_messageinstance0`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `retrieve_messageinstance0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'message_id' in params:
            path_params['MessageId'] = params['message_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'fields_message' in params:
            query_params.append(('fields[Message]', params['fields_message']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Message/{MessageId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageInst1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieveacollectionof_messageobjects0(self, content_type, **kwargs):  # noqa: E501
        """Retrieve a collection of Message objects  # noqa: E501

        Retrieve Message from Message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieveacollectionof_messageobjects0(content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param str include: Message relationships to include (csv)
        :param str fields_message: Message fields to include (csv)
        :param int page_offset: Page offset
        :param int page_limit: Max number of items
        :param str sort: Sort order
        :param str filter_text: text attribute filter (csv)
        :param str filter_receiver_id: receiver_id attribute filter (csv)
        :param str filter_sender: sender attribute filter (csv)
        :param str filter_id: id attribute filter (csv)
        :param str filter: Custom Message filter
        :return: MessageColl1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieveacollectionof_messageobjects0_with_http_info(content_type, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieveacollectionof_messageobjects0_with_http_info(content_type, **kwargs)  # noqa: E501
            return data

    def retrieveacollectionof_messageobjects0_with_http_info(self, content_type, **kwargs):  # noqa: E501
        """Retrieve a collection of Message objects  # noqa: E501

        Retrieve Message from Message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieveacollectionof_messageobjects0_with_http_info(content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_type: (required)
        :param str include: Message relationships to include (csv)
        :param str fields_message: Message fields to include (csv)
        :param int page_offset: Page offset
        :param int page_limit: Max number of items
        :param str sort: Sort order
        :param str filter_text: text attribute filter (csv)
        :param str filter_receiver_id: receiver_id attribute filter (csv)
        :param str filter_sender: sender attribute filter (csv)
        :param str filter_id: id attribute filter (csv)
        :param str filter: Custom Message filter
        :return: MessageColl1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_type', 'include', 'fields_message', 'page_offset', 'page_limit', 'sort', 'filter_text', 'filter_receiver_id', 'filter_sender', 'filter_id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieveacollectionof_messageobjects0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `retrieveacollectionof_messageobjects0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'fields_message' in params:
            query_params.append(('fields[Message]', params['fields_message']))  # noqa: E501
        if 'page_offset' in params:
            query_params.append(('page[offset]', params['page_offset']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('page[limit]', params['page_limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter_text' in params:
            query_params.append(('filter[text]', params['filter_text']))  # noqa: E501
        if 'filter_receiver_id' in params:
            query_params.append(('filter[receiver_id]', params['filter_receiver_id']))  # noqa: E501
        if 'filter_sender' in params:
            query_params.append(('filter[sender]', params['filter_sender']))  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter[id]', params['filter_id']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Message/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageColl1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_message0(self, message_id, content_type, patch_body, **kwargs):  # noqa: E501
        """Update Message  # noqa: E501

        Update Message attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_message0(message_id, content_type, patch_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_id: (required)
        :param str content_type: (required)
        :param MessageInst patch_body: Message attributes (required)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_message0_with_http_info(message_id, content_type, patch_body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_message0_with_http_info(message_id, content_type, patch_body, **kwargs)  # noqa: E501
            return data

    def update_message0_with_http_info(self, message_id, content_type, patch_body, **kwargs):  # noqa: E501
        """Update Message  # noqa: E501

        Update Message attributes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_message0_with_http_info(message_id, content_type, patch_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str message_id: (required)
        :param str content_type: (required)
        :param MessageInst patch_body: Message attributes (required)
        :return: MessageInst1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message_id', 'content_type', 'patch_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_message0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message_id' is set
        if self.api_client.client_side_validation and ('message_id' not in params or
                                                       params['message_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `message_id` when calling `update_message0`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `update_message0`")  # noqa: E501
        # verify the required parameter 'patch_body' is set
        if self.api_client.client_side_validation and ('patch_body' not in params or
                                                       params['patch_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `patch_body` when calling `update_message0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'message_id' in params:
            path_params['MessageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patch_body' in params:
            body_params = params['patch_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Message/{MessageId}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MessageInst1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
