"""
    Messages server

    SAFRSAPI  # noqa: E501

    The version of the OpenAPI document: 0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ...openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from ...openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ...openapi_client.model.jsonapi_error400 import JsonapiError400
from ...openapi_client.model.jsonapi_error403 import JsonapiError403
from ...openapi_client.model.jsonapi_error404 import JsonapiError404
from ...openapi_client.model.jsonapi_error405 import JsonapiError405
from ...openapi_client.model.jsonapi_error409 import JsonapiError409
from ...openapi_client.model.jsonapi_error500 import JsonapiError500
from ...openapi_client.model.post_user_login import PostUserLogin
from ...openapi_client.model.user_coll1 import UserColl1
from ...openapi_client.model.user_incoming_messages_rel_coll import UserIncomingMessagesRelColl
from ...openapi_client.model.user_inst1 import UserInst1


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_user0(
            self,
            post_body,
            content_type="application/vnd.api+json",
            **kwargs
        ):
            """Create User  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_user0(post_body, content_type="application/vnd.api+json", async_req=True)
            >>> result = thread.get()

            Args:
                post_body (UserInst1): User attributes
                content_type (str): defaults to "application/vnd.api+json", must be one of ["application/vnd.api+json"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserInst1
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            kwargs['post_body'] = \
                post_body
            return self.call_with_http_info(**kwargs)

        self.create_user0 = _Endpoint(
            settings={
                'response_type': (UserInst1,),
                'auth': [],
                'endpoint_path': '/Users/',
                'operation_id': 'create_user0',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'post_body',
                ],
                'required': [
                    'content_type',
                    'post_body',
                ],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "VND.API+JSON": "application/vnd.api+json",
                        "JSON": "application/json"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'post_body':
                        (UserInst1,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                    'post_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.api+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__create_user0
        )

        def __delete_userfrom_users0(
            self,
            user_id="jsonapi_id_string",
            content_type="application/vnd.api+json",
            **kwargs
        ):
            """Delete User from Users  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_userfrom_users0(user_id="jsonapi_id_string", content_type="application/vnd.api+json", async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): defaults to "jsonapi_id_string", must be one of ["jsonapi_id_string"]
                content_type (str): defaults to "application/vnd.api+json", must be one of ["application/vnd.api+json"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserInst1
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.delete_userfrom_users0 = _Endpoint(
            settings={
                'response_type': (UserInst1,),
                'auth': [],
                'endpoint_path': '/Users/{UserId}/',
                'operation_id': 'delete_userfrom_users0',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'content_type',
                ],
                'required': [
                    'user_id',
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "VND.API+JSON": "application/vnd.api+json",
                        "JSON": "application/json"
                    },
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'content_type':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'UserId',
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'user_id': 'path',
                    'content_type': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.api+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_userfrom_users0
        )

        def __loginuser0(
            self,
            post_user_login,
            **kwargs
        ):
            """login user  # noqa: E501

            login user  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.loginuser0(post_user_login, async_req=True)
            >>> result = thread.get()

            Args:
                post_user_login (PostUserLogin): login user

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserInst1
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['post_user_login'] = \
                post_user_login
            return self.call_with_http_info(**kwargs)

        self.loginuser0 = _Endpoint(
            settings={
                'response_type': (UserInst1,),
                'auth': [],
                'endpoint_path': '/Users/login',
                'operation_id': 'loginuser0',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'post_user_login',
                ],
                'required': [
                    'post_user_login',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'post_user_login':
                        (PostUserLogin,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'post_user_login': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.api+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__loginuser0
        )

        def __retrieve_messagefromincomingmessages0(
            self,
            user_id="jsonapi_id_string",
            **kwargs
        ):
            """Retrieve Message from incoming_messages  # noqa: E501

            Retrieve Message items from the User incoming_messages \"to-many\" relationship  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_incoming_messages(user_id="jsonapi_id_string", async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): User item. defaults to "jsonapi_id_string", must be one of ["jsonapi_id_string"]

            Keyword Args:
                include (str): Message relationships to include (csv). [optional]
                fields_message (str): Message fields to include (csv). [optional] if omitted the server will use the default value of "content,from_user_id,to_user_id"
                page_offset (int): Page offset. [optional] if omitted the server will use the default value of 0
                page_limit (int): Max number of items. [optional] if omitted the server will use the default value of 10
                sort (str): Sort order. [optional] if omitted the server will use the default value of "content,from_user_id,to_user_id,id"
                filter_content (str): content attribute filter (csv). [optional]
                filter_from_user_id (str): from_user_id attribute filter (csv). [optional]
                filter_to_user_id (str): to_user_id attribute filter (csv). [optional]
                filter_id (str): id attribute filter (csv). [optional]
                filter (str): Custom Message filter. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserIncomingMessagesRelColl
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.retrieve_messagefromincomingmessages0 = _Endpoint(
            settings={
                'response_type': (UserIncomingMessagesRelColl,),
                'auth': [],
                'endpoint_path': '/Users/{UserId}/incoming_messages',
                'operation_id': 'retrieve_messagefromincomingmessages0',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'include',
                    'fields_message',
                    'page_offset',
                    'page_limit',
                    'sort',
                    'filter_content',
                    'filter_from_user_id',
                    'filter_to_user_id',
                    'filter_id',
                    'filter',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'include':
                        (str,),
                    'fields_message':
                        (str,),
                    'page_offset':
                        (int,),
                    'page_limit':
                        (int,),
                    'sort':
                        (str,),
                    'filter_content':
                        (str,),
                    'filter_from_user_id':
                        (str,),
                    'filter_to_user_id':
                        (str,),
                    'filter_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'UserId',
                    'include': 'include',
                    'fields_message': 'fields[Message]',
                    'page_offset': 'page[offset]',
                    'page_limit': 'page[limit]',
                    'sort': 'sort',
                    'filter_content': 'filter[content]',
                    'filter_from_user_id': 'filter[from_user_id]',
                    'filter_to_user_id': 'filter[to_user_id]',
                    'filter_id': 'filter[id]',
                    'filter': 'filter',
                },
                'location_map': {
                    'user_id': 'path',
                    'include': 'query',
                    'fields_message': 'query',
                    'page_offset': 'query',
                    'page_limit': 'query',
                    'sort': 'query',
                    'filter_content': 'query',
                    'filter_from_user_id': 'query',
                    'filter_to_user_id': 'query',
                    'filter_id': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_messagefromincomingmessages0
        )

        def __retrieve_userinstance0(
            self,
            user_id="jsonapi_id_string",
            content_type="application/vnd.api+json",
            **kwargs
        ):
            """Retrieve User instance  # noqa: E501

            Retrieve User from Users  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieve_userinstance0(user_id="jsonapi_id_string", content_type="application/vnd.api+json", async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): defaults to "jsonapi_id_string", must be one of ["jsonapi_id_string"]
                content_type (str): defaults to "application/vnd.api+json", must be one of ["application/vnd.api+json"]

            Keyword Args:
                include (str): User relationships to include (csv). [optional] if omitted the server will use the default value of "incoming_messages"
                fields_user (str): User fields to include (csv). [optional] if omitted the server will use the default value of "name"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserInst1
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.retrieve_userinstance0 = _Endpoint(
            settings={
                'response_type': (UserInst1,),
                'auth': [],
                'endpoint_path': '/Users/{UserId}/',
                'operation_id': 'retrieve_userinstance0',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'content_type',
                    'include',
                    'fields_user',
                ],
                'required': [
                    'user_id',
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "VND.API+JSON": "application/vnd.api+json",
                        "JSON": "application/json"
                    },
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'content_type':
                        (str,),
                    'include':
                        (str,),
                    'fields_user':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'UserId',
                    'content_type': 'Content-Type',
                    'include': 'include',
                    'fields_user': 'fields[User]',
                },
                'location_map': {
                    'user_id': 'path',
                    'content_type': 'header',
                    'include': 'query',
                    'fields_user': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.api+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieve_userinstance0
        )

        def __retrieveacollectionof_userobjects0(
            self,
            content_type="application/vnd.api+json",
            **kwargs
        ):
            """Retrieve a collection of User objects  # noqa: E501

            Retrieve User from Users  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.retrieveacollectionof_userobjects0(content_type="application/vnd.api+json", async_req=True)
            >>> result = thread.get()

            Args:
                content_type (str): defaults to "application/vnd.api+json", must be one of ["application/vnd.api+json"]

            Keyword Args:
                include (str): User relationships to include (csv). [optional] if omitted the server will use the default value of "incoming_messages"
                fields_user (str): User fields to include (csv). [optional] if omitted the server will use the default value of "name"
                page_offset (int): Page offset. [optional] if omitted the server will use the default value of 0
                page_limit (int): Max number of items. [optional] if omitted the server will use the default value of 10
                sort (str): Sort order. [optional] if omitted the server will use the default value of "name,id"
                filter_name (str): name attribute filter (csv). [optional]
                filter_id (str): id attribute filter (csv). [optional]
                filter (str): Custom User filter. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserColl1
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['content_type'] = \
                content_type
            return self.call_with_http_info(**kwargs)

        self.retrieveacollectionof_userobjects0 = _Endpoint(
            settings={
                'response_type': (UserColl1,),
                'auth': [],
                'endpoint_path': '/Users/',
                'operation_id': 'retrieveacollectionof_userobjects0',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'include',
                    'fields_user',
                    'page_offset',
                    'page_limit',
                    'sort',
                    'filter_name',
                    'filter_id',
                    'filter',
                ],
                'required': [
                    'content_type',
                ],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "VND.API+JSON": "application/vnd.api+json",
                        "JSON": "application/json"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'include':
                        (str,),
                    'fields_user':
                        (str,),
                    'page_offset':
                        (int,),
                    'page_limit':
                        (int,),
                    'sort':
                        (str,),
                    'filter_name':
                        (str,),
                    'filter_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'include': 'include',
                    'fields_user': 'fields[User]',
                    'page_offset': 'page[offset]',
                    'page_limit': 'page[limit]',
                    'sort': 'sort',
                    'filter_name': 'filter[name]',
                    'filter_id': 'filter[id]',
                    'filter': 'filter',
                },
                'location_map': {
                    'content_type': 'header',
                    'include': 'query',
                    'fields_user': 'query',
                    'page_offset': 'query',
                    'page_limit': 'query',
                    'sort': 'query',
                    'filter_name': 'query',
                    'filter_id': 'query',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.api+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__retrieveacollectionof_userobjects0
        )
